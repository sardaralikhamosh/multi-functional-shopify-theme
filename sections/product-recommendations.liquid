
{%- if section.settings.color_bg != 'rgba(0,0,0,0)' -%}
	{%- capture bgColor -%}
		background-color: {{ section.settings.color_bg }};
	{%- endcapture -%}
{%- endif -%}
{%- if section.settings.padding_block != blank -%}
	{%- capture paddingblock -%}
		padding: {{section.settings.padding_block}};
	{%- endcapture -%}
{%- endif -%}
{%- if section.settings.margin_block != blank -%}
	{%- capture marginblock -%}
		margin: {{section.settings.margin_block}};
	{%- endcapture -%}
{%- endif -%}
<product-recommendations class="product-recommendations overflow-hidden vela-section" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
	{% if recommendations.performed and recommendations.products_count > 0 %}
		<div class="product-recommendations__inner"  style="{{ bgColor}} {{ paddingblock }} {{ marginblock }}">
			<div class="container{% if section.settings.full_with %}-fluid{% endif %}">
				{%- if section.settings.heading != blank -%}
					<div class="heading-group mb-xl-2 pb-4">
						<h2 class="heading mb-1">
							<span>{{ section.settings.heading }}</span>
						</h2>
						{%- if section.settings.sub_heading != blank -%}
							<div class="sub-heading">
								{{ section.settings.sub_heading }}
							</div>
						{%- endif -%}
					</div>
				{%- endif -%}
				<div class="product-recommendations__content">
					<div class="row gx-3 gx-sm-4">
						{%- for product in recommendations.products -%}
							<div class="col-6 col-md-3">
								{% include 'product-grid-item' %}
							</div>
						{%- endfor -%}
					</div>
				</div>
			</div>
		</div>
	{% endif %}
</product-recommendations>
	  
{% javascript %}
	class ProductRecommendations extends HTMLElement {
		constructor() {
		super();
		const handleIntersection = (entries, observer) => {
			if (!entries[0].isIntersecting) return;
			observer.unobserve(this);
			fetch(this.dataset.url)
			.then(response => response.text())
			.then(text => {
				const html = document.createElement('div');
				html.innerHTML = text;
				const recommendations = html.querySelector('product-recommendations');
				if (recommendations && recommendations.innerHTML.trim().length) {
					this.innerHTML = recommendations.innerHTML;
					var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                      	return new bootstrap.Tooltip(tooltipTriggerEl)
                    });
					if (vela.settings.currencies) {
						Currency.convertAll(shopCurrency, $('[name=currencies]').data('value'));
						velaCurrencyCurrent.text(Currency.currentCurrency);
					} 
				}
			})
			.catch(e => {
				console.error(e);
			});
		}
	
		new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
		}
	}
	customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}
{% schema %}
{
  "name": "Product recommendations",
  "settings": [
	{
		"type": "header",
		"content": "Design Section"
	},
	{
		"type": "checkbox",
		"id": "full_with",
		"label": "Enabel Full Width?"
	},
	{
		"type": "color",
		"id": "color_bg",
		"label": "Background Color",
		"default": "rgba(0,0,0,0)"
	},
	{
		"type": "text",
		"id": "padding_block",
		"label": "Padding",
		"placeholder": "0px 0px"
	},
	{
		"type": "text",
		"id": "margin_block",
		"label": "Margin",
		"placeholder": "0px 0px"
	},
	{
		"type": "header",
		"content": "General Settings"
	},
	{
		"type": "text",
		"id": "heading",
		"label": "Heading",
		"default": "Heading"
	},
	{
		"type": "text",
		"id": "sub_heading",
		"label": "Sub heading",
		"default": "sub heading"
	}
  ]
}
{% endschema %}
